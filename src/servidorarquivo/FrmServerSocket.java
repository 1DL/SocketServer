/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidorarquivo;

import java.awt.Point;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollBar;
import javax.swing.UIManager;

/**
 *
 * @author LuizV1
 */
public class FrmServerSocket extends javax.swing.JFrame {

    /**
     * Creates new form FrmInterface
     */
    public FrmServerSocket() {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciarSocketServer = new javax.swing.JButton();
        scrollPaneRecebimento = new javax.swing.JScrollPane();
        txtaLogAtividadeRecebimento = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        scrollPaneEnvio = new javax.swing.JScrollPane();
        txtaLogAtividadeEnvio = new javax.swing.JTextArea();
        scrollPaneErro = new javax.swing.JScrollPane();
        txtaLogErro = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SynchroSoft - Servidor Socket ");

        btnIniciarSocketServer.setText("Iniciar Servidor Socket para receber e enviar arquivos");
        btnIniciarSocketServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarSocketServerActionPerformed(evt);
            }
        });

        txtaLogAtividadeRecebimento.setColumns(20);
        txtaLogAtividadeRecebimento.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        txtaLogAtividadeRecebimento.setRows(5);
        txtaLogAtividadeRecebimento.setFocusable(false);
        scrollPaneRecebimento.setViewportView(txtaLogAtividadeRecebimento);

        jLabel1.setText("Log de Atividade de Recebimento:");

        txtaLogAtividadeEnvio.setColumns(20);
        txtaLogAtividadeEnvio.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        txtaLogAtividadeEnvio.setRows(5);
        txtaLogAtividadeEnvio.setFocusable(false);
        scrollPaneEnvio.setViewportView(txtaLogAtividadeEnvio);

        txtaLogErro.setColumns(20);
        txtaLogErro.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        txtaLogErro.setRows(5);
        txtaLogErro.setFocusable(false);
        scrollPaneErro.setViewportView(txtaLogErro);

        jLabel2.setText("Log de Erros:");

        jLabel3.setText("Log de Atividade de Envio:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneRecebimento)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPaneErro)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(194, 194, 194))
                    .addComponent(scrollPaneEnvio)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(btnIniciarSocketServer, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 67, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIniciarSocketServer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneRecebimento, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneEnvio, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneErro)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarSocketServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarSocketServerActionPerformed
        Thread thread1 = new Thread(receberArquivoNomeado);
        Thread thread2 = new Thread(enviarArquivoNomeado);
        thread1.start();
        thread2.start();
        btnIniciarSocketServer.setEnabled(false);
    }//GEN-LAST:event_btnIniciarSocketServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmServerSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmServerSocket().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciarSocketServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane scrollPaneEnvio;
    private javax.swing.JScrollPane scrollPaneErro;
    private javax.swing.JScrollPane scrollPaneRecebimento;
    private javax.swing.JTextArea txtaLogAtividadeEnvio;
    private javax.swing.JTextArea txtaLogAtividadeRecebimento;
    private javax.swing.JTextArea txtaLogErro;
    // End of variables declaration//GEN-END:variables

    public Runnable receberArquivoNomeado = new Runnable() {
        @Override
        public void run() {

            try {
                int bytesRead;
                int current = 0;

                ServerSocket serverSocket = null;
                serverSocket = new ServerSocket(5005);

                String pastaPadrao = "C:/Synchro Relatorios";

                Path diretorioPasta = Paths.get(pastaPadrao);

                if (!Files.exists(diretorioPasta)) {
                    Files.createDirectory(diretorioPasta);
                    atualizarLogAtividadeRecebimento("Diretório para salvar arquivos não encontrada.\n"
                            + "Foi criado um novo diretório: C:\\Synchro Relatorios");
                }
                while (true) {
                    atualizarLogAtividadeRecebimento("Esperando recebimento de arquivo...");

                    Socket clientSocket = null;
                    clientSocket = serverSocket.accept();

                    atualizarLogAtividadeRecebimento("Socket conectado. IP do cliente: " + clientSocket.getInetAddress());

                    InputStream in = clientSocket.getInputStream();

                    DataInputStream clientData = new DataInputStream(in);

                    String fileName = clientData.readUTF();

                    atualizarLogAtividadeRecebimento("Nome do arquivo a ser salvo: " + fileName);

                    //Verificação se o arquivo a ser salvo já existe
                    String pastaArquivoExistente = "C:/Synchro Relatorios/" + fileName;

                    Path diretorioArquivoExistente = Paths.get(pastaArquivoExistente);

                    if (Files.exists(diretorioArquivoExistente)) {
                        atualizarLogAtividadeRecebimento("Arquivo recebido duplicado.");
                        Files.delete(diretorioArquivoExistente);
                        atualizarLogAtividadeRecebimento("Arquivo já existente removido.");
                    }

                    OutputStream output = new FileOutputStream("C:\\Synchro Relatorios\\" + fileName);
                    long size = clientData.readLong();
                    byte[] buffer = new byte[1024];
                    while (size > 0 && (bytesRead = clientData.read(buffer, 0, (int) Math.min(buffer.length, size))) != -1) {
                        output.write(buffer, 0, bytesRead);
                        size -= bytesRead;
                    }
                    // Closing the FileOutputStream handle
                    in.close();
                    clientData.close();
                    output.close();
                    atualizarLogAtividadeRecebimento("Arquivo recebido e salvo com sucesso em:\n"
                            + "C:\\Synchro Relatorios\\" + fileName);

                }

            } catch (IOException ex) {
                atualizarLogErro(String.valueOf(ex));
            } catch (Exception ex) {
                atualizarLogErro(String.valueOf(ex));
            }
        }

    };

    public Runnable enviarArquivoNomeado = new Runnable() {
        @Override
        public void run() {
            while (true) {
                try {
                    String ipCliente;
                    String nomeArquivo;
                    ServerSocket serverSocket = new ServerSocket(5006);

                    while (true) {
                        atualizarLogAtividadeEnvio("Esperando solicitação de envio de arquivo...");
                        //Reading the message from the client
                        Socket clientSocket = serverSocket.accept();
                        atualizarLogAtividadeEnvio("Socket conectado. IP do cliente: " + clientSocket.getInetAddress());
                        InputStream is = clientSocket.getInputStream();
                        InputStreamReader isr = new InputStreamReader(is);
                        BufferedReader br = new BufferedReader(isr);
                        String stringRecebida = br.readLine();
                        atualizarLogAtividadeEnvio("Nome do arquivo para ser enviado ao cliente: " + stringRecebida);

                        ipCliente = String.valueOf(clientSocket.getInetAddress());
                        ipCliente = ipCliente.replace("/", "");
                        ipCliente = ipCliente.trim();
                        nomeArquivo = stringRecebida;

                        is.close();
                        isr.close();
                        br.close();
                        clientSocket.close();

                        atualizarLogAtividadeEnvio("Início do procedimento de envio.");

                        //Fim do recebimento do ip e do nome do arquivo//
                        //Inicio do envio do arquivo para o cliente//
                        Socket sock = new Socket(ipCliente, 5007);

                        File arquivo = new File("C:\\Synchro Relatorios\\" + nomeArquivo);

                        atualizarLogAtividadeEnvio("Diretório do arquivo a ser enviado:\n"
                                + arquivo);

                        byte[] mybytearray = new byte[(int) arquivo.length()];

                        FileInputStream fis = new FileInputStream(arquivo);

                        BufferedInputStream bis = new BufferedInputStream(fis);

                        DataInputStream dis = new DataInputStream(bis);

                        dis.readFully(mybytearray, 0, mybytearray.length);

                        OutputStream os = sock.getOutputStream();

                        DataOutputStream dos = new DataOutputStream(os);

                        dos.writeUTF(arquivo.getName());
                        dos.writeLong(mybytearray.length);
                        dos.write(mybytearray, 0, mybytearray.length);
                        dos.flush();

                        os.write(mybytearray, 0, mybytearray.length);
                        os.flush();

                        fis.close();
                        bis.close();
                        dis.close();
                        os.close();
                        dos.close();
                        sock.close();

                        atualizarLogAtividadeEnvio("Arquivo enviado com sucesso.");

                    }

                } catch (IOException ex) {
                    atualizarLogErro(String.valueOf(ex));
                } catch (Exception ex) {
                    atualizarLogErro(String.valueOf(ex));
                }
            }
        }
    };

    private void atualizarLogAtividadeRecebimento(String msg) {
        String timeStamp = new SimpleDateFormat("dd/MM/yyyy-HH:mm:ss").format(Calendar.getInstance().getTime());
        txtaLogAtividadeRecebimento.setText(txtaLogAtividadeRecebimento.getText() + timeStamp + "\n" + msg + "\n");
        scrollPaneRecebimento.validate();
        JScrollBar vertical = scrollPaneRecebimento.getVerticalScrollBar();
        vertical.setValue(vertical.getMaximum());
    }

    private void atualizarLogAtividadeEnvio(String msg) {
        String timeStamp = new SimpleDateFormat("dd/MM/yyyy-HH:mm:ss").format(Calendar.getInstance().getTime());
        txtaLogAtividadeEnvio.setText(txtaLogAtividadeEnvio.getText() + timeStamp + "\n" + msg + "\n");
        scrollPaneEnvio.getViewport().setViewPosition(new Point(0, txtaLogAtividadeEnvio.getDocument().getLength()));
    }

    private void atualizarLogErro(String msg) {
        String timeStamp = new SimpleDateFormat("dd/MM/yyyy-HH:mm:ss").format(Calendar.getInstance().getTime());
        txtaLogErro.setText(txtaLogErro.getText() + timeStamp + "\n" + msg + "\n");
        scrollPaneErro.validate();
        JScrollBar vertical = scrollPaneErro.getVerticalScrollBar();
        vertical.setValue(vertical.getMaximum());
    }

}
